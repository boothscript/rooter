version: "3"
services:
  web:
    container_name: font-end # How the container will appear when listing containers from the CLI
    image: node:10 # The <container-name>:<tag-version> of the container, in this case the tag version aligns with the version of node
    user: root # The user to run as in the container
    working_dir: "/app" # Where to container will assume it should run commands and where you will start out if you go inside the container
    networks:
      - app # Networking can get complex, but for all intents and purposes just know that containers on the same network can speak to each other
    ports:
      - "3003:3000" # <host-port>:<container-port> to listen to, so anything running on port 3000 of the container will map to port 3000 on our localhost
    volumes:
      - ./:/app # <host-directory>:<container-directory> this says map the current directory from your system to the /app directory in the docker container
      - ./data:/app/data
    command: "npx pm2 start ecosystem.config.js --no-daemon" # The command docker will execute when starting the container, this command is not allowed to exit, if it does your container will stop
  osrmapp1:
    container_name: osrmcar
    image: osrm/osrm-backend
    networks:
      - app
    volumes:
      - ./osrmcar/:/data
    # ports:
    #   - "5000:5000"
    command: "osrm-routed --algorithm mld /data/sw-merged.osrm  --max-trip-size 300"
  osrmapp2:
    container_name: osrmfoot
    image: osrm/osrm-backend
    networks:
      - app
    volumes:
      - ./osrmfoot/:/data
    # ports:
    #   - "5000:5000"
    command: "osrm-routed --algorithm mld /data/sw-merged.osrm  --max-trip-size 300"
  # proxy:
  #   container_name: nginx
  #   build: ./nginx/
  #   networks:
  #     - app
  #   ports:
  #     - "80:8002"

networks:
  app:
